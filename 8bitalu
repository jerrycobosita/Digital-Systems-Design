module alu (
	input [7:0] a,b,
	input	[1:0] opcode,

	output [7:0] out,
	output carryout
	
);	
	


reg [7:0] result;
wire [8:0] tmp;
assign out = result;
assign tmp = {1'b0, a} + {1'b0,b};
assign carryout = tmp[8];
always@(*)

begin
	case(opcode)
	//addition
	2'b00:
		result = a + b;
		
	//subtraction
	2'b01:
		result = a - b;
		
	//complement_2s
	2'b10:
		result = ~result + 1;
		
	//bit-wise XOR
	2'b11:
		result = a | b;
		
	default: result = result;
	endcase
end

endmodule

